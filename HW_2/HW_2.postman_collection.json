{
	"info": {
		"_postman_id": "476e2a96-ccf8-492f-9c78-baa9abb2e46c",
		"name": "HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "EP_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"/* 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"6. Проверить, что salary в ответе равно salary s request (salary вбить руками.) */\r",
							"let name_check_resp = jsonData.name;\r",
							"let age_check_resp = parseInt(jsonData.age);\r",
							"let salary_check_resp = parseInt(jsonData.salary);\r",
							"let name_s = \"Grzegorz\";\r",
							"let age_s = 25;\r",
							"let salary_s = 2000;\r",
							"\r",
							"pm.test(\"Name test\", function () {\r",
							"    pm.expect(name_s).to.eql(name_check_resp);\r",
							"});\r",
							"\r",
							"pm.test(\"Age test\", function () {\r",
							"    pm.expect(age_s).to.eql(age_check_resp);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary test\", function () {\r",
							"    pm.expect(salary_s).to.eql(salary_check_resp);\r",
							"});\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"/* 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"10. Проверить, что salary в ответе равно salary s request (salary забрать из request.) */\r",
							"let req_age = parseInt(req.age);\r",
							"let req_name = req.name;\r",
							"let req_salary = parseInt(req.salary);\r",
							"\r",
							"pm.test(\"Check name from request\", function () {\r",
							"    pm.expect(name_check_resp).to.eql(req_name);\r",
							"});\r",
							"\r",
							"pm.test(\"Check age from request\", function () {\r",
							"    pm.expect(age_check_resp).to.eql(req_age);\r",
							"});\r",
							"\r",
							"pm.test(\"Check salary from request\", function () {\r",
							"    pm.expect(salary_check_resp).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//11. Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let u_salary = jsonData.u_salary_1_5_year * 4;\r",
							"let req_salary_4 = req.u_salary_1_5_year;\r",
							"pm.test(\"Check salary*4 from request\", function () {\r",
							"    pm.expect(u_salary).to.eql(req_salary_4 * 4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Grzegorz",
							"type": "default"
						},
						{
							"key": "age",
							"value": "25",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "2000",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// pm.test(\"Status code is 200\", function () {\r",
							"//     pm.response.to.have.status(200);\r",
							"// });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "login",
							"value": "Grzegorz",
							"type": "default"
						},
						{
							"key": "password",
							"value": "23e3256r",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/login",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.all()\r",
							"\r",
							"/* 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"7. Проверить, что salary в ответе равно salary s request (salary забрать из request.) */\r",
							"let name_check_resp = jsonData.name;\r",
							"let age_check_resp = parseInt(jsonData.age);\r",
							"let salary_check_resp = parseInt(jsonData.salary);\r",
							"\r",
							"pm.test(\"Name test\", function () {\r",
							"    pm.expect(name_check_resp).to.eql(\"Grzegorz\");\r",
							"});\r",
							"\r",
							"pm.test(\"Age test\", function () {\r",
							"    pm.expect(age_check_resp).to.eql(25);\r",
							"});\r",
							"\r",
							"pm.test(\"Salary test\", function () {\r",
							"    pm.expect(salary_check_resp).to.eql(2000);\r",
							"});\r",
							"\r",
							"//8. Вывести в консоль параметр family из response.\r",
							"let family = jsonData.family;\r",
							"console.log(family);\r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name.\r",
							"let dog_name = jsonData.family.pets.dog.name;\r",
							"console.log(dog_name);\r",
							"\r",
							"//10. Проверить, что у параметра dog есть параметры age.\r",
							"let dog_age = jsonData.family.pets.dog.age;\r",
							"console.log(dog_age);\r",
							"\r",
							"//11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"Test name\", function () {\r",
							"    pm.expect(dog_name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"//12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"Test age\", function () {\r",
							"    pm.expect(dog_age).to.eql(4);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Grzegorz&age=25&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Grzegorz"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//4. Спарсить request.\r",
							"let req = pm.request.url.query.all()\r",
							"\r",
							"/* 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"6. Проверить, что age в ответе равно age из request (age забрать из request.) */\r",
							"let name_check_resp = jsonData.name;\r",
							"let age_check_resp = parseInt(jsonData.age);\r",
							"\r",
							"pm.test(\"Name test\", function () {\r",
							"    pm.expect(name_check_resp).to.eql(\"Grzegorz\");\r",
							"});\r",
							"\r",
							"pm.test(\"Age test\", function () {\r",
							"    pm.expect(age_check_resp).to.eql(25);\r",
							"});\r",
							"\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"let salary_req = req[2].value;\r",
							"console.log(salary_req);\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response.\r",
							"let name_resp = jsonData.salary;\r",
							"console.log(name_resp);\r",
							"\r",
							"//9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"let salary_zero = jsonData.salary[0];\r",
							"console.log(salary_zero);\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"let salary_first = jsonData.salary[1];\r",
							"console.log(salary_first);\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"let salary_second = jsonData.salary[2];\r",
							"console.log(salary_second);\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"let salary_check_zero = jsonData.salary[0];\r",
							"let req_salary_check = parseInt(req[2].value);\r",
							"\r",
							"pm.test(\"Salary Zero\", function () {\r",
							"    pm.expect(salary_check_zero).to.eql(req_salary_check);\r",
							"});\r",
							"\r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let salary_check_first = parseInt(jsonData.salary[1]);\r",
							"let req_salary_first = parseInt(req[2].value * 2);\r",
							"\r",
							"pm.test(\"Salary First\", function () {\r",
							"    pm.expect(salary_check_first).to.eql(req_salary_first);\r",
							"});\r",
							"\r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let salary_check_second = parseInt(jsonData.salary[2]);\r",
							"let req_salary_second = parseInt(req[2].value * 3);\r",
							"\r",
							"pm.test(\"Salary Second\", function () {\r",
							"    pm.expect(salary_check_second).to.eql(req_salary_second);\r",
							"});\r",
							"\r",
							"/* 15. Создать в окружении переменную name\r",
							"16. Создать в окружении переменную age\r",
							"17. Создать в окружении переменную salary */\r",
							"\r",
							"//18. Передать в окружение переменную name \r",
							"pm.environment.set(\"name\", jsonData.name);\r",
							"\r",
							"//19. Передать в окружение переменную age\r",
							"pm.environment.set(\"age\", jsonData.age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"pm.environment.set(\"salary\", jsonData.salary);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary. \r",
							"let sal = jsonData.salary;\r",
							"\r",
							"for (let i = 0; i <= 2; i++) {\r",
							"\tconsole.log(sal[i]);\r",
							"};\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Grzegorz&age=25&salary=2000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Grzegorz"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "2000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "EP_5",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//7. Спарсить request.\r",
							"let req = request.data;\r",
							"\r",
							"//8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Check start salary\"),function() {\r",
							"pm.response.to.have.jsonBody(\"start_qa_salary\");\r",
							"};\r",
							"//9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Check salary 6 m\"),function() {\r",
							"pm.response.to.have.jsonBody(\"qa_salary_after_6_months\");\r",
							"};\r",
							"\r",
							"//10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Check salary 12 m\"),function() {\r",
							"pm.response.to.have.jsonBody(\"qa_salary_after_12_months\");\r",
							"};\r",
							"\r",
							"//11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Check salary 1.5\"),function() {\r",
							"pm.response.to.have.jsonBody(\"qa_salary_after_1.5_year\");\r",
							"};\r",
							"\r",
							"//12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Check salary 3.5\"),function() {\r",
							"pm.response.to.have.jsonBody(\"qa_salary_after_3.5_years\");\r",
							"};\r",
							"\r",
							"//13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Check person\"),function() {\r",
							"pm.response.to.have.jsonBody(\"person\");\r",
							"};\r",
							"\r",
							"//14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let start_sal_check = jsonData.start_qa_salary;\r",
							"pm.test(\"Start salary from request\", function () {\r",
							"    pm.expect(start_sal_check).to.eql(2000);\r",
							"});\r",
							"\r",
							"//15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let aft6m_sal_check = jsonData.qa_salary_after_6_months;\r",
							"pm.test(\"Start salary after 6m\", function () {\r",
							"    pm.expect(aft6m_sal_check).to.eql(4000);\r",
							"});\r",
							"\r",
							"//16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let aft12m_sal_check = jsonData.qa_salary_after_12_months;\r",
							"pm.test(\"Start salary after 12m\", function () {\r",
							"    pm.expect(aft12m_sal_check).to.eql(5400);\r",
							"});\r",
							"\r",
							"//17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let aft1_5_year_sal_check = jsonData[\"qa_salary_after_1.5_year\"];\r",
							"let req_aft15_sal = req.salary * 3.3;\r",
							"pm.test(\"Start salary after 1.5\", function () {\r",
							"    pm.expect(aft1_5_year_sal_check).to.eql(req_aft15_sal);\r",
							"});\r",
							"\r",
							"//18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let aft3_5_year_sal_check = jsonData[\"qa_salary_after_3.5_years\"];\r",
							"let req_aft35_sal = req.salary * 3.8;\r",
							"pm.test(\"Start salary after 3.5\", function () {\r",
							"    pm.expect(aft3_5_year_sal_check).to.eql(req_aft35_sal);\r",
							"});\r",
							"\r",
							"//19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"let person1 = jsonData.person.u_name[1]\r",
							"let req_salary_person = parseInt(req.salary)\r",
							"pm.test(\"Check person 1\", function () {\r",
							"    pm.expect(person1).to.eql(req_salary_person);\r",
							"});\r",
							"\r",
							"//20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let age_u_age = jsonData.person.u_age\r",
							"pm.test(\"Check u_age\", function () {\r",
							"    pm.expect(age_u_age).to.eql(25);\r",
							"});\r",
							"\r",
							"//21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let u_sal_5_check = jsonData.person.u_salary_5_years;\r",
							"let req_u_sal_5 = req.salary * 4.2;\r",
							"pm.test(\"Check u_salary_5_years\", function () {\r",
							"    pm.expect(u_sal_5_check).to.eql(req_u_sal_5);\r",
							"});\r",
							"\r",
							"//22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"let pers = jsonData.person;\r",
							"function getAllPropertyName(obj){\r",
							"    let arr = [];\r",
							"for(p_key in obj){arr.push(p_key)};\r",
							"     return arr;\r",
							"};\r",
							"getAllPropertyName(pers);\r",
							"console.log(pers);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "default"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "default"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "default"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}